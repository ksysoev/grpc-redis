package main

import (
	"bytes"
	"flag"
	"text/template"

	tmpl "github.com/ksysoev/grpc-redis/pkg/template"

	"google.golang.org/protobuf/compiler/protogen"
)

const methodTemplate = `
func (x *RPCRedis{{.ServiceName}}) handle{{.MethodName}}(req {{.RequestType}}) (any, error) {
	var rpcReq {{.InputType}}

	err := req.ParseParams(&rpcReq)
	if err != nil {
		return nil, {{.Errorf}}("error parsing request: %v", err)
	}

	return x.service.{{.MethodName}}(req.Context(), &rpcReq)
}
`

type MethodData struct {
	ServiceName string
	MethodName  string
	InputType   string
	OutputType  string
	RequestType string
	Errorf      string
}

func main() {
	var flags flag.FlagSet

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

// generateFile generates a _ascii.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_grpc-redis.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-grpc-redis. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	tmplMethod, err := template.New("method").Parse(methodTemplate)
	if err != nil {
		panic(err)
	}

	for _, service := range file.Services {
		methods := make([]string, 0, len(service.Methods))
		for _, method := range service.Methods {
			methods = append(methods, method.GoName)
		}

		tmplService := tmpl.Service{
			ServiceName:  service.GoName,
			FullName:     string(service.Desc.FullName()),
			RedisClient:  g.QualifiedGoIdent(protogen.GoIdent{GoName: "Client", GoImportPath: "github.com/redis/go-redis/v9"}),
			RPCServer:    g.QualifiedGoIdent(protogen.GoIdent{GoName: "Server", GoImportPath: "github.com/ksysoev/redis-rpc"}),
			NewRPCServer: g.QualifiedGoIdent(protogen.GoIdent{GoName: "NewServer", GoImportPath: "github.com/ksysoev/redis-rpc"}),
			NewUUID:      g.QualifiedGoIdent(protogen.GoIdent{GoName: "New", GoImportPath: "github.com/google/uuid"}),
			Methods:      methods,
		}

		svcRender, err := tmplService.Render()
		if err != nil {
			panic(err)
		}

		g.P(svcRender)

		for _, method := range service.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}

			data := MethodData{
				ServiceName: service.GoName,
				MethodName:  method.GoName,
				InputType:   g.QualifiedGoIdent(method.Input.GoIdent),
				OutputType:  g.QualifiedGoIdent(method.Output.GoIdent),
				RequestType: g.QualifiedGoIdent(protogen.GoIdent{GoName: "Request", GoImportPath: "github.com/ksysoev/redis-rpc"}),
				Errorf:      g.QualifiedGoIdent(protogen.GoIdent{GoName: "Errorf", GoImportPath: "fmt"}),
			}

			var buf bytes.Buffer
			if err := tmplMethod.Execute(&buf, data); err != nil {
				panic(err)
			}

			g.P(buf.String())

		}

		g.P()
	}

	return g
}
