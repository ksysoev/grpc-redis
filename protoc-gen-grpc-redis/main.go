package main

import (
	"bytes"
	"flag"
	"text/template"

	"google.golang.org/protobuf/compiler/protogen"
)

const serviceTemplate = `
// {{.ServiceName}} is the server API for {{.FullName}}
type RPCRedis{{.ServiceName}} struct {
    redis *{{.RedisClient}}
}
`

type ServiceData struct {
	ServiceName string
	FullName    string
	RedisClient string
}

var test *string

func main() {
	var flags flag.FlagSet
	test = flags.String("test", "test", "some test flag")

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

// generateFile generates a _ascii.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_grpc-redis.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-grpc-redis. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	tmpl, err := template.New("service").Parse(serviceTemplate)
	if err != nil {
		panic(err)
	}

	for _, service := range file.Services {
		data := ServiceData{
			ServiceName: service.GoName,
			FullName:    string(service.Desc.FullName()),
			RedisClient: g.QualifiedGoIdent(protogen.GoIdent{GoName: "Client", GoImportPath: "github.com/go-redis/redis/v9"}),
		}

		var buf bytes.Buffer
		if err := tmpl.Execute(&buf, data); err != nil {
			panic(err)
		}

		g.P(buf.String())

		for _, method := range service.Methods {
			g.P("func (x *RPCService", service.GoName, ") ", method.GoName, "(", method.Input.GoIdent.GoName, ") ", method.Output.GoIdent.GoName, " {")
			g.P("return `hello world`")
			g.P("}")

		}

		g.P()
	}

	return g
}
